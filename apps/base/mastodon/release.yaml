---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: mastodon
spec:
  chart:
    spec:
      chart: ./
      sourceRef:
        kind: GitRepository
        name: mastodon
        namespace: flux-system
  interval: 1h0m0s
  install:
    remediation:
      retries: 3
  values:
    mastodon:
      createAdmin:
        enabled: true
        username: admin
        email: sysadmin@mastodonpro.com
      cron:
        removeMedia:
          enabled: true
          schedule: "0 0 * * 0"
      locale: en
      local_domain: "" # kustomization
      # You must redirect the path LOCAL_DOMAIN/.well-known/ to WEB_DOMAIN/.well-known/ as described
      web_domain: "" # kustomization
      persistence:
        assets:
          # -- ReadWriteOnce is more widely supported than ReadWriteMany, but limits
          # scalability, since it requires the Rails and Sidekiq pods to run on the
          # same node.
          accessMode: ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
          storageClassName: gp2
        system:
          accessMode: ReadWriteOnce
          resources:
            requests:
              storage: 100Gi
          storageClassName: gp2
      s3:
        enabled: false
        access_key: ""
        access_secret: ""
        # -- you can also specify the name of an existing Secret
        # with keys AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
        existingSecret: ""
        bucket: ""
        endpoint: ""
        hostname: ""
        region: ""
        # -- If you have a caching proxy, enter its base URL here.
        alias_host: ""
      secrets:
        existingSecret: "secrets"
      smtp:
        auth_method: plain
        ca_file: /etc/ssl/certs/ca-certificates.crt
        delivery_method: smtp
        domain:
        enable_starttls: "auto"
        from_address: notifications@example.com
        openssl_verify_mode: peer
        port: 587
        reply_to:
        server: smtp.mailgun.org
        tls: false
        login:
        password:
        # -- you can also specify the name of an existing Secret
        # with the keys login and password
        existingSecret:
      streaming:
        port: 4000
        # -- The base url for streaming can be set if the streaming API is deployed to
        # a different domain/subdomain.
        base_url: null

    ingress:
      enabled: true
      annotations:
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/ssl-redirect: "443"
        alb.ingress.kubernetes.io/healthcheck-path: /
        external-dns.alpha.kubernetes.io/hostname: "" # kustomization
      ingressClassName: alb
      tls:
        - hosts:
            - "" # kustomization
      hosts:
        - host: "" # kustomization
          paths:
            - path: "/"

    elasticsearch:
      enabled: false
      host: # kustomization
    postgresql:
      enabled: false
      postgresqlHostname: # kustomization
      auth:
        database: mastodon
        username: mastodon
        existingSecret: "postgres"
    redis:
      enabled: false
      hostname: # kustomization
      port: 6379
      auth:
        existingSecret: "redis"
      namespace: "mastodon"
    service:
      type: ClusterIP
      port: 80
    externalAuth:
      oidc:
        # -- OpenID Connect support is proposed in PR #16221 and awaiting merge.
        enabled: false
        # display_name: "example-label"
        # issuer: https://login.example.space/auth/realms/example-space
        # discovery: true
        # scope: "openid,profile"
        # uid_field: uid
        # client_id: mastodon
        # client_secret: SECRETKEY
        # redirect_uri: https://example.com/auth/auth/openid_connect/callback
        # assume_email_is_verified: true
        # client_auth_method:
        # response_type:
        # response_mode:
        # display:
        # prompt:
        # send_nonce:
        # send_scope_to_token_endpoint:
        # idp_logout_redirect_uri:
        # http_scheme:
        # host:
        # port:
        # jwks_uri:
        # auth_endpoint:
        # token_endpoint:
        # user_info_endpoint:
        # end_session_endpoint:
      saml:
        enabled: false
        # acs_url: http://mastodon.example.com/auth/auth/saml/callback
        # issuer: mastodon
        # idp_sso_target_url: https://login.example.com/auth/realms/example/protocol/saml
        # idp_cert: '-----BEGIN CERTIFICATE-----[your_cert_content]-----END CERTIFICATE-----'
        # idp_cert_fingerprint:
        # name_identifier_format: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified
        # cert:
        # private_key:
        # want_assertion_signed: true
        # want_assertion_encrypted: true
        # assume_email_is_verified: true
        # uid_attribute: "urn:oid:0.9.2342.19200300.100.1.1"
        # attributes_statements:
        #   uid: "urn:oid:0.9.2342.19200300.100.1.1"
        #   email: "urn:oid:1.3.6.1.4.1.5923.1.1.1.6"
        #   full_name: "urn:oid:2.16.840.1.113730.3.1.241"
        #   first_name: "urn:oid:2.5.4.42"
        #   last_name: "urn:oid:2.5.4.4"
        #   verified:
        #   verified_email:
      oauth_global:
        # -- Automatically redirect to OIDC, CAS or SAML, and don't use local account authentication when clicking on Sign-In
        omniauth_only: false
      cas:
        enabled: false
        # url: https://sso.myserver.com
        # host: sso.myserver.com
        # port: 443
        # ssl: true
        # validate_url:
        # callback_url:
        # logout_url:
        # login_url:
        # uid_field: 'user'
        # ca_path:
        # disable_ssl_verification: false
        # assume_email_is_verified: true
        # keys:
        #   uid: 'user'
        #   name: 'name'
        #   email: 'email'
        #   nickname: 'nickname'
        #   first_name: 'firstname'
        #   last_name: 'lastname'
        #   location: 'location'
        #   image: 'image'
        #   phone: 'phone'
      pam:
        enabled: false
        # email_domain: example.com
        # default_service: rpam
        # controlled_service: rpam
      ldap:
        enabled: false
        # host: myservice.namespace.svc
        # port: 389
        # method: simple_tls
        # base:
        # bind_on:
        # password:
        # uid: cn
        # mail: mail
        # search_filter: "(|(%{uid}=%{email})(%{mail}=%{email}))"
        # uid_conversion:
        #   enabled: true
        #   search: "., -"
        #   replace: _
    serviceAccount:
      # -- Specifies whether a service account should be created
      create: true
      # -- Annotations to add to the service account
      annotations: {}
      # -- The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""
